# name: Terraform Deployment

# on:
#   push:
#     branches:
#       - main
#     paths:
#       - 'terraform/**' # Trigger only for changes in the `k8s` directory
#       - '.github/workflows/terraform-deploy.yml'
# jobs:
#   terraform:
#     env: 
#       AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#       AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
#       AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#       AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#     runs-on: ubuntu-latest

#     steps:
#     # Step 1: Checkout the repository
#     - name: Checkout code
#       uses: actions/checkout@v3

#     # Step 2: Set up Terraform
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v2
#       with:
#         terraform_version: 1.5.6 # Replace with the required version

#     # Step 3: Initialize Terraform
#     - name: Terraform Init
#       run: terraform init
#       working-directory: terraform
    
#     - name: Terraform Plan
#       # run: terraform plan -out=tfplan
#       working-directory: terraform
#       run: terraform plan -no-color -input=false -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
#       continue-on-error: true

#     # Step 4: Terraform Apply
#     - name: Terraform Apply
#       env:
#         ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
#         ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
#         ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

#       run: terraform apply -auto-approve -input=false -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
#       working-directory: terraform




name: 'Terraform'

on:
  push:
    branches: main
    paths:
      - 'terraform/**' 
      - '.github/workflows/terraform-deploy.yml' #

# permissions:
#   contents: read

jobs:
  terraform:
    name: 'Terraform'
    env: 
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    runs-on: ubuntu-latest
    # environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init 
      working-directory: terraform 

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt 
      working-directory: terraform 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var="resource_group=${{ vars.RESOURCE_GROUP }}" -var="cluster_name=${{ vars.CLUSTER_NAME }} -var="container_registry_name=${{ secrets.ACR_USERNAME }}"
      working-directory: terraform 

     # On push to "master", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      # if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false -var="resource_group=${{ vars.RESOURCE_GROUP }}" -var="cluster_name=${{ vars.CLUSTER_NAME }} -var="container_registry_name=${{ secrets.ACR_USERNAME }}"
      working-directory: terraform 
